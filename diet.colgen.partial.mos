!
!  author: ajay dsouza
!  desc : mos file for Mosel Xpress
!  Using Column Generation Technique
!

model DietGen	! Name the model

uses "mmxprs"	! include the Xpress solver package
!uses "mmodbc"	! include package to read from Excel
uses "mmsheet"  ! using mmsheet as he student license, have does not have mmodbc

NumFoods := 7035	! declare how many foods we have
NumNutrients := 30	! declare how many nutrients we're tracking consumption of

declarations	! declare sets and arrays

	Foods = 1..NumFoods+1 				! We need an extra "dummy" food as we'll see later
	Nutrients = 1..NumNutrients
	
	FoodNames: array(Foods) of string		! names of each food
	NutNames: array(Nutrients) of string	! names of each nutrient
		
	Chol: array(Foods) of real				! vector of cholesterol for each food
	Calorie: array(Foods) of real				! vector of calorie for each food
	Contents: array(Foods,Nutrients) of real	! matrix of food content
	Minimums: array(Nutrients) of real			! minimum intake of each nutrient
	Maximums: array(Nutrients) of real	 		! maximum intake of each nutrient
		
	Eaten: dynamic array(Foods) of mpvar	! variables: amount of each food eaten
											! "dynamic" means we'll be generating variables
											! instead of defining them all up front
	

	minShadowPrices: array(Nutrients) of real		! array to hold the shadow prices of the minimum-intake constraints
	maxShadowPrices: array(Nutrients) of real		! array to hold the shadown prices of the maximum-intake constraints
									
	ColsGen: integer			! number of columns generated in the problem so far
	BestReducedCost: real		! what is the best reduced cost
	BestFood: integer			! which food has the best reduced cost
	TotalCalorie: real			! total calorie
	
	EatMin,EatMax:array(Nutrients) of linctr !  min and max linear constraints
	eatenConstraints: dynamic array(Foods) of linctr ! Not null constraints for x variables
	TotalChol: linctr            ! The objective constraint
	objectiveVal: real           ! the objective value of min cholestrol
	dualEatMin: array(Nutrients) of real    ! dual variables for min constraints
	dualEatMax: array(Nutrients) of real    ! dual variables for max constraints
	minCons,maxCons: real          ! hold the reduction values for Y*A(j) - min and max cost
	
	(! - DEBUG
	fnRet: integer                 ! check for return value of functions  - DEBUG
	bas:basis                    ! basis matrix	 for DEBUG
	vset: set of mpvar             ! the set of variables for DEBUG
	nutrientValue: array(Nutrients) of real			! actual nutrient intake - DEBUG
	!)
end-declarations	! end declarations section


!initializations from "mmodbc.odbc:diet.xls"	! read from Excel file
initializations from "mmsheet.xls:noindex;diet.xls"	! read from Excel file using mmsheet

 FoodNames as "[a3:a7037]"	! Pls note that the following comments are relevant to 
 							! mmodbc only, mmsheet reads from the line specified
 							!
 							! NOTE: In the Excel file, the food names
 							! are in cells a3:a7148, not a2:a7148.
 							! For some reason, Xpress makes you always
							! include one row of cells above the data you
							! want to read.  
							!	You'll see the same extra row in all of 
							! these other things read from Excel.
							
 NutNames as "[b2:ae2]"	 						
 Chol as "[ac3:ac7037]"
 Contents as "[b3:ae7037]" 
 Minimums as "[b7039:ae7039]"
 Maximums as "[b7041:ae7041]"
 Calorie as "[d3:d7037]"
 
end-initializations


! We need to start with at least one column or else the problem 
! will start off infeasible.  We'll use a "dummy" food as our 
! initial column.  The dummy food will have a very high cost (1,000,000)
! and will contain all of the minimums necessary - that way we can be sure
! that by itself it will a be feasible solution.

! It is hard to manually pick the combination of foods which will give the minimum nutrients
!  So we employ the strategy of creating a dummy food which has the minimum nutrient level for
!  each nutrient
!  BUT the cholestrol level fro this food ( whcih is the objective to be minimized) 
!  is very very high
! This gives us a manually selected food which is feasible to begin with
forall(k in Nutrients)
	Contents(NumFoods+1,k) := Minimums(k)	! create contents of "dummy" food
	
FoodNames(NumFoods+1) := "DUMMY FOOD"
Chol(NumFoods+1) := 1000000


! Create the new (dummy food) variable.  Because the variables were 
! declared as "dynamic" none of the other variables exist in the problem yet.
! you will need this command to generate new variables later
create(Eaten(NumFoods+1))	
!create(eatenConstraints(NumFoods+1))	

! Create minimum and maximum intake constraints.
! If all the variables existed, we could say
!       sum(j in Foods) Contents(j,k)*Eaten(j) <= Maximums(k).
! However, not all the variables Eaten(j) are created yet, so as new ones
! get created we'll have to add them to the constraints.
!   Below, we add the one variable we've created so far (the dummy variable) to
! each constraint.
!   These constraints need to be named ("EatMin(k)" and "EatMax(k)") because
! we'll need to get the dual variables for them later, and for us to be able to 
! ask Xpress for the dual variable, we need a way to refer to the constraints.

forall(k in Nutrients) do
	EatMin(k) := Contents(NumFoods+1,k)*Eaten(NumFoods+1) >= Minimums(k)
	EatMax(k) := Contents(NumFoods+1,k)*Eaten(NumFoods+1) <= Maximums(k)
end-do

! positive constraint for x
!eatenConstraints(NumFoods+1) := Eaten(NumFoods+1) >= 0

! Create objective function.  Just like the intake constraints, we'll have 
! to add variables to it as they get generated.
TotalChol := Chol(NumFoods+1)*Eaten(NumFoods+1)

	

!!!!!!!!!!!! Begin column generation !!!!!!!!!!!!!!!!!!

ColsGen := 0
repeat	
	
	! solve the problem using the variables that have been generated so far
	
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
	
	! DEBUG - print the coefficients of constraints	
	(!forall(k in Nutrients) do
		r := getcoeff(EatMin(k) ,Eaten(BestFood) )
		writeln("Ceofficient of constraint ",BestFood," is ",r)
	end-do
	!)

	! minimize the objective	
	minimize(TotalChol)
	
	! get the minimum cholestrol the objective
	objectiveVal := getobjval
	writeln("Total Cholesterol = ",objectiveVal)

	! DEBUG - print the solutions to x
	(!forall(k in Nutrients) do
		getvars(EatMin(k),vset)
		writeln("Min constraint ",k)
		forall(x in vset) write(getsol(x),",")
		writeln("")
	end-do
		
	forall(k in Nutrients) do
		getvars(EatMax(k),vset)
		writeln("Max constraint ",k)
		forall(x in vset) write(getsol(x),",")
		writeln("")
	end-do
	!)
	
	! get the dual variable (cB*Binverse)
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
		
	! get the dual for each of the two sets of min/max constraints 
	! for each nutrient
	forall(i in Nutrients) dualEatMin(i):=getdual(EatMin(i))
	forall(i in Nutrients) dualEatMax(i):=getdual(EatMax(i))
	
	
	(! DEBUG - get basis and check value of variables
	savebasis(bas)
	forall(i in Foods) foodUse(i):=getsol(Eaten(i))
	!)
	
	!DEBUG - print the basis
	(!
	forall(i in Foods) do
		fnRet := getbstat(bas,Eaten(i))
		if fnRet = 1 then		
			writeln("Basis=",i)
		end-if
	end-do
	!)
	
	! Find the food with the best reduced cost.
	!   As we search through each food, we'll keep track of the best reduced
	! cost found so far in BestReducedCost, and whatever food has that best
	! reduced cost will be stored in BestFood.
	
	BestReducedCost := 0
	BestFood := 0
	forall(j in Foods) do		
	
			! if food j has a better (lower) reduced cost than the previous best,
			! then store its reduced cost in BestReducedCost and let BestFood be j.
			!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
	
			! get Y^T*A_j for each A_j 
			minCons := sum(i in Nutrients) dualEatMin(i)*Contents(j,i)
			maxCons := sum(i in Nutrients) dualEatMax(i)*Contents(j,i)
	
			if ( BestReducedCost > (Chol(j) - minCons - maxCons) ) then
				BestReducedCost := Chol(j) - minCons - maxCons
				BestFood := j				
			end-if			
	
	end-do

	! If there's a variable with a good reduced cost, then
	! 	create the variable
	!	update the number of columns generated
	!	update the constraints for each nutrient by adding the contents of the new food: constraints can be refered by their name, then you can do NAME_CONSTR += new component
	!	update the objective function by adding the cost of the new food: similar here
	
	if BestReducedCost < -0.000001 then		
		writeln("Adding food ",BestFood," (",FoodNames(BestFood),") : reduced cost is ",BestReducedCost)
		!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
		
		! Create the variable for the food to be added 
		create(Eaten(BestFood))	
		!create(eatenConstraints(BestFood))	

		! increment the columns in the basis
		ColsGen+=1
		
		! append the variable for the BestFood found to all the min and max
		! nutrient constraints
		forall(k in Nutrients) do
			EatMin(k) += Contents(BestFood,k)*Eaten(BestFood)
			EatMax(k) += Contents(BestFood,k)*Eaten(BestFood)
		end-do

		! positive constraint for x
		!eatenConstraints(BestFood) := Eaten(BestFood) >= 0

		! add the BestFood variable to the objective function 
		TotalChol+= Chol(BestFood)*Eaten(BestFood)
		
	end-if


! Here and above ("if BestReducedCost < -0.000001") we use 0.000001 instead of 0.
! The reason is that floating point roundoff errors might make the computer
! calculate a reduced cost to be something like 0.000000000001 instead of 0.  This
! is normal -- most computer software has this sort of problem, and they use the
! same sort of checks to catch it.  Specifically, any value of x for which, say,
! -0.000000001 < x < 0.000000001 will be treated as 0.  For this application, we
! can safely use 0.000001 instead.
!   This is really a CS/computer architecture issue; if you're interested in
! learning more about what causes it, let me know and I'd be happy to explain more.

! DEBUG 
(!if ColsGen > 10 then
	break
end-if
!)
!loadbasis(bas)
!loadprob(TotalChol)

until BestReducedCost >= -0.000001	! continue until no variable has a good reduced cost


!!!!!!!!!!!! End column generation !!!!!!!!!!!!!!!!!!



(! - DEBUG - verify the nutrient values
forall(i in Nutrients)
	nutrientValue(i) := 0			
!)
		
! The solution can be long, so print a summary: only say what we eat.
TotalCalorie := 0
writeln("\n===============\n")
forall(j in Foods)
	if (getsol(Eaten(j)) > 0) then
		writeln(FoodNames(j)," = ",getsol(Eaten(j)))
		
		!!! you need to compute the total calorie for the chosen food !!!
		!!!!!!!!! write your code here !!!!!!!!!!!
		TotalCalorie += Calorie(j)*getsol(Eaten(j))
		
		(! - DEBUG - verify the nutrient values
		forall(i in Nutrients)
			nutrientValue(i) += Contents(j,i)*getsol(Eaten(j))
		!)
		
	end-if
	
(! - DEBUG - verify the nutrient values
forall(i in Nutrients)
	writeln(NutNames(i),"-",Minimums(i),"-",nutrientValue(i),"-",Maximums(i))			
!)

writeln("\nTotal Cholesterol = ",getobjval)
writeln("\n Total Calorie = ", TotalCalorie)
writeln("\nTotal: ",ColsGen," columns generated.")

end-model
